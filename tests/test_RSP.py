"""
Author: Mike Moss
Contact: mikejmoss3@gmail.com	

Defines unit tests for the simmes.RSP module

"""

import numpy as np

def testResponseFolding():
	"""
	Testing response folding method
	"""
	from simmes.RSP import RSP, make_folded_spec
	from simmes.SPECFUNC import PL

	resp_mat = RSP()
	resp_mat.load_SwiftBAT_resp(imx=0, imy=0)

	# Folded power law calculated in XSPEC using fakeit command with a powerlaw model, alpha = 0, norm = 1000
	folded_pl = np.array([( 0,  204.1311  ), ( 1,  105.68417 ), ( 2,  150.63248 ), ( 3,  192.1514  ),
		( 4,  228.9156  ), ( 5,  259.15714 ), ( 6,  286.71286 ), ( 7,  303.53357 ),
		( 8,  303.5148  ), ( 9,  294.68326 ), (10,  310.99686 ), (11,  295.34036 ),
		(12,  306.70612 ), (13,  312.0505  ), (14,  308.44803 ), (15,  335.66855 ),
		(16,  346.6681  ), (17,  361.59744 ), (18,  392.49942 ), (19,  384.7584  ),
		(20,  414.53952 ), (21,  404.4448  ), (22,  433.52335 ), (23,  440.53494 ),
		(24,  445.35983 ), (25,  443.55435 ), (26,  441.75986 ), (27,  437.1031  ),
		(28,  450.26544 ), (29,  423.0672  ), (30,  431.00983 ), (31,  400.2287  ),
		(32,  405.2618  ), (33,  391.97583 ), (34,  376.9967  ), (35,  362.6355  ),
		(36,  366.00735 ), (37,  343.9098  ), (38,  350.22287 ), (39,  322.51077 ),
		(40,  322.18845 ), (41,  308.28772 ), (42,  294.6721  ), (43,  280.70828 ),
		(44,  267.1123  ), (45,  254.54814 ), (46,  252.63365 ), (47,  230.46808 ),
		(48,  228.01572 ), (49,  207.89864 ), (50,  205.61429 ), (51,  195.16692 ),
		(52,  185.20422 ), (53,  182.36998 ), (54,  165.70404 ), (55,  156.85497 ),
		(56,  154.70384 ), (57,  140.73566 ), (58,  138.41096 ), (59,  130.7975  ),
		(60,  123.55187 ), (61,  116.86921 ), (62,  110.71779 ), (63,  108.66025 ),
		(64,   98.77911 ), (65,   96.95961 ), (66,   88.19114 ), (67,   86.59555 ),
		(68,   81.89192 ), (69,   77.43088 ), (70,   73.20277 ), (71,   69.24229 ),
		(72,   65.45959 ), (73,   64.19694 ), (74,   58.55706 ), (75,   57.38200 ),
		(76,   53.89590 ), (77,   48.54514 ), (78,   35.61772 ), (79, 1193.2714  )], 
	 	dtype=[("CHANNEL", int), ("RATE", float)] )
	# Swift/BAT energy bins
	energy_bins = np.array([(0.00000, 10.0000), (10.0000, 12.0000), (12.0000, 14.0000), (14.0000, 16.0000),
				(16.0000, 18.0000), (18.0000, 20.0000), (20.0000, 22.0000), (22.0000, 24.0000), (24.0000, 26.0000),
				(26.0000, 28.0000), (28.0000, 30.1000), (30.1000, 32.1000), (32.1000, 34.2000), (34.2000, 36.3000),
				(36.3000, 38.3000), (38.3000, 40.4000), (40.4000, 42.5000), (42.5000, 44.6000), (44.6000, 46.8000), 
				(46.8000, 48.9000), (48.9000, 51.1000), (51.1000, 53.2000), (53.2000, 55.4000), (55.4000, 57.6000), 
				(57.6000, 59.8000), (59.8000, 62.0000), (62.0000, 64.2000), (64.2000, 66.4000), (66.4000, 68.7000),
				(68.7000, 70.9000), (70.9000, 73.2000), (73.2000, 75.4000), (75.4000, 77.7000), (77.7000, 80.0000),
				(80.0000, 82.3000), (82.3000, 84.6000), (84.6000, 87.0000), (87.0000, 89.3000), (89.3000, 91.7000),
				(91.7000, 94.0000), (94.0000, 96.4000), (96.4000, 98.8000), (98.8000, 101.200), (101.200, 103.600),
				(103.600, 106.000), (106.000, 108.400), (108.400, 110.900), (110.900, 113.300), (113.300, 115.800),
				(115.800, 118.200), (118.200, 120.700), (120.700, 123.200), (123.200, 125.700), (125.700, 128.300),
				(128.300, 130.800), (130.800, 133.300), (133.300, 135.900), (135.900, 138.400), (138.400, 141.000),
				(141.000, 143.600), (143.600, 146.200), (146.200, 148.800), (148.800, 151.400), (151.400, 154.100),
				(154.100, 156.700), (156.700, 159.400), (159.400, 162.000), (162.000, 164.700), (164.700, 167.400),
				(167.400, 170.100), (170.100, 172.800), (172.800, 175.500), (175.500, 178.200), (178.200, 181.000),
				(181.000, 183.700), (183.700, 186.500), (186.500, 189.300), (189.300, 192.100), (192.100, 194.900), 
				(194.900, 6553.60)], dtype=[("E_MIN", float), ("E_MAX", float)] )

	folded_pl['RATE'] /= (energy_bins['E_MAX'] - energy_bins['E_MIN'])
	folded_pl['RATE'] = np.round(folded_pl['RATE'], 2)

	spec = PL( alpha = 0, norm = 1000)
	test_folded_pl = make_folded_spec(spec, resp_mat, add_fluc=False)
	test_folded_pl['RATE'] = np.round(test_folded_pl['RATE'], 2)

	np.testing.assert_equal(test_folded_pl['RATE'], folded_pl['RATE'])


if __name__ == "__main__":
	testResponseFolding()
